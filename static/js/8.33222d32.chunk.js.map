{"version":3,"sources":["../articles/_posts/nodejs框架设计和部署.md"],"names":["module","exports"],"mappings":"2EAAAA,EAAOC,QAAU,CAAC,MAAQ,mDAAgB,KAAO,sBAAsB,KAAO,UAAU,WAAa,GAAG,IAAM,sDAAmB,QAAU","file":"static/js/8.33222d32.chunk.js","sourcesContent":["module.exports = {\"title\":\"nodejs框架设计和部署\",\"date\":\"2019-11-01 15:06:34\",\"tags\":\"node.js\",\"header_img\":\"\",\"key\":\"nodejs框架设计和部署.md\",\"content\":\"\\n\\n# 主题\\n\\n主要介绍 node.js 的框架的技术选型和框架搭建，以及如何在服务器上部署发布。这里客户端使用小程序来介绍。小程序主要功能涉及到用户授权登录，地图定位，webSocket 发送定位，二维码扫描添加设备。\\n\\n## 技术选型\\n\\n- Koa2，http 的框架\\n- Mongodb，非关系型数据库，配合 typegoose 的库来编写\\n- ws，封装 webSocket 的一个模块\\n- jsonwebtoken，生成 token 的库\\n- TypeScript 使用 ts-node 的库来启动\\n- pm2，进程管理，日志查看，服务器部署的工具\\n\\nKoa+Typescript，除了本身类型系统对数据库的数据模型定义有好处外。Koa 中间件的 context 有很多库或者用户自定义数据结构挂载在上面，如果没有类型声明，开发者可能不知道 context 上有哪些类型，导致工程维护性增加。\\n\\nMongodb（[https://www.mongodb.com/cn](https://www.mongodb.com/cn)）Mongodb 本身查询语法是 JS 写的，很符合前端的使用。基于文档处理，本身查询速度也比较快。关联表的结构设计，也相当简单，学习成本低。对于前端来说对表的设计经验不足，如果使用 mysql 之类的关系型数据库，如果设计不当，很可能导致性能问题。\\n\\npm2 是 node 社区比较成熟的进程管理框架，本身自带日志查看，错误重启，服务器部署的能力。\\n\\n## 工程结构\\n\\n整体工程的设计使用 mvc 的结构，Koa 中间件，使用 TS 类型辅助。\\n\\n### 目录\\n\\n-src\\n --api  接口的 api 比如微信小程序登录授权相关的 api\\n --config  配置项\\n --const  常量\\n --controllers 控制层\\n --interfaces 接口\\n --middleware 自定义中间层\\n --modules 模型层，主要放数据库相关的模型数据\\n --types ts 拓展类型\\n --utils 工具包，放请求，logger，配置，jwt 相关的工具\\n --server.ts 服务启动入口\\n-.env 全局常量配置（用户自定义的，不提交 git）\\n-.env.example 全局常量配置\\n-ecosystem.config.js pm2 的配置文件，部署的时候自动执行\\n\\n## 开发环境配置和启动\\n\\n### 数据库\\n\\n#### 安装\\n\\n数据库：[https://docs.mongodb.com/manual/installation/](https://docs.mongodb.com/manual/installation/)\\n可视化工具：[https://www.mongodb.com/download-center/compass](https://www.mongodb.com/download-center/compass)    选择社区免费版本\\n\\n#### 配置\\n\\n输入 mongo 就可以连接。最好配置用户和密码，虽然本地未必要配置密码，但是服务端肯定要配置的，所以就先介绍下如何配置。\\n\\n1. 命令行输入 mongo，进入数据库 shell\\n1. 输入 use admin 进入数据库\\n1. 创建管理员账户\\n\\n```javascript\\ndb.createUser({\\n  user: 'useradmin',\\n  pwd: 'adminpassword',\\n  roles: [{ role: 'userAdminAnyDatabase', db: 'admin' }],\\n})\\n```\\n\\n4. 验证是否添加成功 db.auth(\\\"useradmin\\\", \\\"adminpassword\\\")，成功返回 1，然后输入 exit 退出\\n5. 修改配置文件 mac 在/usr/local/etc/mongod.conf 下，输入 code /usr/local/etc/mongod.conf 最后一行添加(注意缩进)\\n\\n```javascript\\nsecurity: authorization: enabled\\n```\\n\\n6.重启服务\\n\\n```shell\\nbrew services restart\\n```\\n\\n7.创建一个应用的数据库 use app_db 8.对这个应用的数据库创建权限\\n\\n```javascript\\n// 拥有者\\ndb.createUser({\\n  user: 'youruser',\\n  pwd: 'yourpassword',\\n  roles: [\\n    {\\n      role: 'dbOwner',\\n      db: 'app_db',\\n    },\\n  ],\\n})\\n\\n// 可读写\\ndb.createUser({\\n  user: 'youruser2',\\n  pwd: 'yourpassword2',\\n  roles: [\\n    {\\n      role: 'readWrite',\\n      db: 'app_db',\\n    },\\n  ],\\n})\\n```\\n\\n9.最后可以输入连接来启动\\n\\n```javascript\\nmongodb://youruser2:yourpassword2@localhost/app_db\\n```\\n\\n10、可以使用可视化工具 compass 连接\\n\\n### 项目配置\\n\\n重命名.env.example 为.env，基本的.env 代码如下\\n\\n```js\\n// 这个是ENV全局变量，其中变量NODE_ENV在开始执行创建， development: 是开发环境，production：是生产环境。\\n\\n// mongodb的地址 production生产环境依赖\\nMONGODB_URI=mongodb://<mlab_user>:<mlab_password>@<mlab_connection_url>\\n\\n// mongodb的地址 developmet开发环境依赖\\nMONGODB_URI_LOCAL=mongodb://localhost:27017/go_app\\n\\n// token的秘钥\\nTOKEN_KEY=ting.ting@huang_GO!GO!GO!!!\\n\\n// 微信AppId\\nWX_APP_ID=wx0840e0b26c481112\\n\\n// 微信的AppSecret\\nWX_APP_SECRET=34c4824eb1115281d249e85dba4f8157\\n```\\n\\n### 项目启动\\n\\n安装 ts-node 和 typescript 到开发环境\\n\\n使用 npm start 命令启动，安装 nodemon 到开发环境，然后如下输入命令\\n\\n```shell\\nnodemon --watch 'src/**/*' -e ts,tsx --exec 'ts-node' ./src/server.ts\\n```\\n\\n使用 vscode，这里是我推荐的方式。然后配置 launch.json，使用 F5 启动、调试。\\n\\n```json\\n{\\n  // 使用 IntelliSense 了解相关属性。\\n  // 悬停以查看现有属性的描述。\\n  // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387\\n  \\\"version\\\": \\\"0.2.0\\\",\\n  \\\"configurations\\\": [\\n    {\\n      \\\"type\\\": \\\"node\\\",\\n      \\\"request\\\": \\\"launch\\\",\\n      \\\"name\\\": \\\"Launch Program\\\",\\n      \\\"runtimeArgs\\\": [\\\"-r\\\", \\\"ts-node/register\\\"],\\n      \\\"args\\\": [\\\"${workspaceFolder}/src/server.ts\\\"],\\n      \\\"env\\\": {\\n        \\\"NODE_ENV\\\": \\\"development\\\"\\n      },\\n      \\\"sourceMaps\\\": true,\\n      \\\"cwd\\\": \\\"${workspaceRoot}\\\",\\n      \\\"protocol\\\": \\\"inspector\\\",\\n      \\\"console\\\": \\\"integratedTerminal\\\",\\n      \\\"internalConsoleOptions\\\": \\\"neverOpen\\\"\\n    }\\n  ]\\n}\\n```\\n\\n## 服务器配置和部署\\n\\n服务器使用 CentOS，之所以不使用 ubuntu，是因为没必要使用到界面，也是大多数服务器采用到的方案。当然使用 ubuntu 也没什么问题，内核都一样。然后使用 yum 安装一些常用的工具库。\\n\\n### 连接服务器\\n\\n首先在本机上创建 ssh 公钥和秘钥，然后去服务器添加公钥，然后连接服务器。\\n命令如下 ssh -q -l root -p 22 111.230.28.25\\n\\n### 安装数据库\\n\\n和开发环境配置类似，只是都是 linux 下的，创建密码和本地使用 compass 连接验证。这里注意记得在要给服务开端口。\\n\\n### Nginx 安装和配置\\n\\n网上教程很多，我这里主要介绍使用 yum 来安装 Nginx，使用 yum 安装非常简单。使用 systemctl 来启动（当然也有使用 service，但是不能开机启动了），有兴趣想了解 systemctl 相关命令可以看看这个[http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html](http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html)\\n\\n#### 安装\\n\\n1. 因为 Nginx 不在 yum 的默认源中，所以要手动添加源\\n\\n```shell\\n$ sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\\n```\\n\\n2. 安装\\n\\n```shell\\n$ sudo yum install nginx\\n```\\n\\n#### 配置\\n\\n安装完 Nginx，会生成一个配置文件，路径是：/etc/nginx/nginx.conf。输入命令 vim nginx.conf 来编辑\\n\\n```shell\\nuser  nginx;\\nworker_processes 1;\\nevents {\\n   worker_connections 1024;\\n}\\nerror_log  /var/log/nginx/error.log warn;\\npid        /var/run/nginx.pid;\\nhttp {\\n   server {\\n       listen  80;\\n       server_name localhost;\\n       location / {\\n           proxy_pass  http://127.0.0.1:8088;\\n           proxy_set_header   Host             $host;\\n           proxy_set_header   X-Real-IP        $remote_addr;\\n           proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;\\n       }\\n       location ^~ /websocket/ {\\n           proxy_pass  http://127.0.0.1:8088;\\n           proxy_http_version 1.1;\\n           proxy_set_header Upgrade $http_upgrade;\\n           proxy_set_header Connection \\\"Upgrade\\\";\\n       }\\n    }\\n     server {\\n        listen          443 ssl;\\n        server_name     localhost\\n        ssl             on;\\n        ssl_certificate cert/2760618_www.dayuan.tech.pem;\\n        ssl_certificate_key  cert/2760618_www.dayuan.tech.key;\\n        ssl_session_cache    shared:SSL:1m;\\n        ssl_session_timeout  5m;\\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\\n        ssl_ciphers ECDH:AESGCM:HIGH:!RC4:!DH:!MD5:!3DES:!aNULL:!eNULL;\\n        ssl_prefer_server_ciphers  on;\\n        location / {\\n            proxy_pass http://127.0.0.1:8088;\\n            proxy_set_header        Host    $http_host;\\n            proxy_set_header        X-Real-IP       $remote_addr;\\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\\n        }\\n        location ^~ /websocket/ {\\n            proxy_pass http://127.0.0.1:8088;\\n            proxy_set_header        Host    $http_host;\\n            proxy_set_header        X-Real-IP       $remote_addr;\\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\\n            proxy_set_header Upgrade $http_upgrade;\\n            proxy_set_header Connection \\\"upgrade\\\";\\n        }\\n    }\\n    include       /etc/nginx/mime.types;\\n    default_type  application/octet-stream;\\n\\n    log_format  main  '$remote_addr - $remote_user [$time_local] \\\"$request\\\" '\\n                      '$status $body_bytes_sent \\\"$http_referer\\\" '\\n                      '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"';\\n\\n    access_log  /var/log/nginx/access.log  main;\\n\\n    sendfile        on;\\n\\n    #tcp_nopush     on;\\n\\n    keepalive_timeout  65;\\n\\n    gzip  on;\\n\\n    include /etc/nginx/conf.d/*.conf;\\n}\\n```\\n\\n#### 启动\\n\\n设置开机启动\\n\\n```shell\\nsystemctl enable nginx\\n```\\n\\n启动服务\\n\\n```shell\\nsystemctl start nginx\\n```\\n\\n停止服务\\n\\n```shell\\nsystemctl stop nginx\\n```\\n\\n重新启动服务\\n\\n```shell\\nsystemctl restart nginx\\n```\\n\\n热更新，也就是不想重新启动整个服务，只想重新加载配置文件\\n\\n```shell\\nsystemctl reload nginx\\n```\\n\\n## 小程序登录模块\\n\\n![image.png](node.js框架设计和部署/weixin_login.png)\\n\\n和这里图有点不同的是，登录凭证校验完后，我是使用一个会过期 token 来验证。验证成功后客户端会发送一次获取头像和昵称等用户基本信息的请求，获取后，再把这些传回给开发者服务器。以后用户基本信息都从开发者服务器获取就好。\\n还有一个主意点微信的 auth.getAccessToken，需要定期获取，具体如下[https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html](https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/access-token/auth.getAccessToken.html)。\\n\\n## Koa 控制层统一处理\\n\\n```typescript\\n// 路由模块使用前需要先安装和实例化\\nimport Router from 'koa-router'\\nimport fs from 'fs'\\nimport checkToken from '@/middleware/checkToken'\\n\\nconst router = new Router()\\n\\n/**\\n * 将所有controller下的文件都加载到router\\n */\\nlet urls = fs.readdirSync(__dirname + '/../controllers')\\n\\n// 所有请求api路由前都要经过这个控制层\\nrouter.use('/api', checkToken)\\n\\nurls.forEach((element: string) => {\\n  let module = require(__dirname + '/../controllers/' + element)\\n  router.use('/api', module.default.routes(), module.default.allowedMethods())\\n})\\n\\nexport default router\\n```\\n\\n## 模型层使用 Typegoose\\n\\n如果不用 Typegoose\\n\\n```typescript\\ninterface Car {\\n  model?: string;\\n}\\n\\ninterface Job {\\n  title?: string;\\n  position?: string;\\n}\\n\\ninterface User {\\n  name?: string;\\n  age: number;\\n  job?: Job;\\n  car: Car | string;\\n}\\n\\nmongoose.model('User', {\\n  name: String,\\n  age: { type: Number, required: true },\\n  job: {\\n    title: String;\\n    position: String;\\n  },\\n  car: { type: Schema.Types.ObjectId, ref: 'Car' }\\n});\\n\\nmongoose.model('Car', {\\n  model: string,\\n});\\n```\\n\\n用了以后\\n\\n```typescript\\nclass Job {\\n  @prop()\\n  title?: string\\n\\n  @prop()\\n  position?: string\\n}\\n\\nclass Car extends Typegoose {\\n  @prop()\\n  model?: string\\n}\\n\\nclass User extends Typegoose {\\n  @prop()\\n  name?: string\\n\\n  @prop({ required: true })\\n  age!: number\\n\\n  @prop()\\n  job?: Job\\n\\n  @prop({ ref: Car })\\n  car?: Ref<Car>\\n}\\n```\\n\\n## WebSocket 配置\\n\\n无论是 kos 还 webSocket 都是调用 Node 标准的 http 模块创建的 http.Server 监听的，koa 只是把响应的函数注册到 http.Server，同理 WebSocket 也可以把响应的函数注册到 http.Server，所以可以使用同一个端口。我是对 webSokcet 做了一层封装，其中连接的代码如下\\n\\n```typescript\\nfunction connectSocket(server: Server) {\\n  wss = new WebSocketServer({ server })\\n  wss.on('connection', onConnection)\\n  server.on('upgrade', (request, socket, head) => {\\n    const pathname = url.parse(request.url).pathname\\n    if (pathname === '/websocket/location') {\\n      wss.handleUpgrade(request, socket, head, ws => {\\n        wss.emit('connection', ws, request)\\n      })\\n    }\\n  })\\n}\\n```\\n\"}"],"sourceRoot":""}